plugins {
  id 'cpp'
  id 'java'
  id 'google-test'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2025.0'
  id 'edu.wpi.first.NativeUtils' version '2025.9.0'
  id 'edu.wpi.first.GradleJni' version '1.1.0'
  id 'edu.wpi.first.GradleVsCode' version '2.1.0'
}

ext.wpilibVersion = "2025.+"

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}


repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://maven.ctr-electronics.com/release/' }
  maven { url 'https://maven.revrobotics.com/' }
  maven { url 'https://3015rangerrobotics.github.io/pathplannerlib/repo'}
  maven { url 'https://lib.choreo.autos/dep'}
  maven { url 'https://maven.photonvision.org/repository/internal' }
  maven { url 'https://maven.photonvision.org/repository/snapshots' }
  maven { url 'https://dev.studica.com/maven/release/2025/' }

}

if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply C++ configuration
apply from: 'config.gradle' 

// Apply Java configuration
dependencies {
    implementation "edu.wpi.first.cscore:cscore-java:$wpilibVersion"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$wpilibVersion"
    implementation "edu.wpi.first.ntcore:ntcore-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpilibVersion"
    implementation "edu.wpi.first.wpimath:wpimath-java:$wpilibVersion"
    implementation "edu.wpi.first.apriltag:apriltag-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiunits:wpiunits-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:$wpilibVersion"
    implementation "edu.wpi.first.hal:hal-java:$wpilibVersion"
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    implementation 'edu.wpi.first.thirdparty.frc2025.opencv:opencv-java:4.10.0-2'

    implementation 'org.photonvision:photonlib-java:v2025.2.1'
    implementation 'org.photonvision:photontargeting-java:v2025.2.1'
    implementation 'com.ctre.phoenix6:wpiapi-java:25.1.0'
    implementation 'com.pathplanner.lib:PathplannerLib-java:2025.1.1'
    implementation 'com.revrobotics.frc:REVLib-java:2025.0.0'
    implementation 'choreo:ChoreoLib-java:2025.0.3'
    implementation 'com.studica.frc:Studica-java:2025.0.1'
}

// Set up exports properly
nativeUtils {
  exportsConfigs {
    // Main library is just default empty. This will export everything
    Vendor {
    }
  }
  privateExportsConfigs {
    // Only export explicit symbols from driver library
    VendorDriver {
      exportsFile = project.file("src/main/driver/symbols.txt")
    }
  }
}


model {
  components {
    // Vendor(NativeLibrarySpec) {
    //   sources {
    //     // cpp {
    //     //   source {
    //     //     srcDirs 'src/main/native/cpp'
    //     //     include '**/*.cpp'
    //     //   }
    //     //   exportedHeaders {
    //     //     srcDirs 'src/main/native/include'
    //     //   }
    //     // }
    //   }
    //   binaries.all {
    //     lib library: 'VendorDriver', linkage: 'shared'
    //   }
    //   nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
    // }

    // VendorDriver(JniNativeLibrarySpec) {
    //   enableCheckTask true
    //   javaCompileTasks << compileJava
    //   jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
    //   // Leave these for future proofing
    //   jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.linuxarm32)
    //   jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.linuxarm64)
    //   // sources {
    //   //   cpp {
    //   //     source {
    //   //       srcDirs 'src/main/driver/cpp'
    //   //       include '**/*.cpp'
    //   //     }
    //   //     exportedHeaders {
    //   //       srcDirs 'src/main/driver/include'
    //   //     }
    //   //   }
    //   // }

    //   nativeUtils.useRequiredLibrary(it, "driver_shared")
    // }
  }
  testSuites {
    // VendorTest {
    //     sources.cpp {
    //         source {
    //             srcDir 'src/test/native/cpp'
    //             include '**/*.cpp'
    //         }
    //     }

    //     binaries.all {
    //       lib library: 'VendorDriver', linkage: 'shared'
    //     }

    //     nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
    // }

    // VendorDriverTest {
    //     sources.cpp {
    //         source {
    //             srcDir 'src/test/driver/cpp'
    //             include '**/*.cpp'
    //         }
    //     }

    //     nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
    // }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion '8.5'
}
